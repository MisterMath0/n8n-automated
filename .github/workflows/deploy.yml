name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
  schedule:
  - cron: '0 2 * * 0'  # Every Sunday at 2 AM

env:
  SERVER_HOST: 91.99.108.18
  SERVER_USER: root
  PROJECT_PATH: /root/n8n-automated
  HEALTH_CHECK_URL: https://api.autokraft.app/health

jobs:
  # Test job - runs on every PR and push
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint || true  # Don't fail on lint errors for now

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run backend health check
      run: |
        cd backend
        python -c "
        try:
            from app.main import app
            print('‚úÖ Backend imports successfully')
        except Exception as e:
            print(f'‚ùå Backend import failed: {e}')
            raise
        "

  # Deploy job - runs only on main branch pushes
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://autokraft.app
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

    - name: Test SSH connection
      run: |
        ssh -o ConnectTimeout=10 ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "echo 'SSH connection successful'"

    - name: Deploy to server
      run: |
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'EOF'
          set -e
          cd ${{ env.PROJECT_PATH }}
          
          echo "üöÄ Starting deployment..."
          
          # Pull latest changes
          git fetch origin
          git reset --hard origin/main
          
          # Deploy using our script
          chmod +x deploy.sh
          ./deploy.sh -u
          
          echo "‚úÖ Deployment completed!"
        EOF

    - name: Health check
      run: |
        echo "üè• Running health check..."
        
        # Wait for services to stabilize
        sleep 30
        
        # Check if the site is responding
        for i in {1..5}; do
          if curl -f -s --max-time 10 ${{ env.HEALTH_CHECK_URL }}; then
            echo "‚úÖ Health check passed!"
            exit 0
          else
            echo "‚è≥ Attempt $i failed, retrying in 10s..."
            sleep 10
          fi
        done
        
        echo "‚ùå Health check failed after 5 attempts"
        exit 1

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "üéâ Deployment successful!"
          echo "üåê Site: https://autokraft.app"
        else
          echo "‚ùå Deployment failed!"
        fi

  # Manual deployment job
  manual-deploy:
    name: Manual Deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    environment:
      name: ${{ github.event.inputs.environment }}
      url: https://autokraft.app
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Manual deploy to ${{ github.event.inputs.environment }}
      run: |
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'EOF'
          set -e
          cd ${{ env.PROJECT_PATH }}
          
          echo "üöÄ Manual deployment to ${{ github.event.inputs.environment }}..."
          
          # Pull latest changes
          git pull origin main
          
          # Deploy
          chmod +x deploy.sh
          ./deploy.sh -d
          
          echo "‚úÖ Manual deployment completed!"
        EOF

    - name: Post-deployment health check
      run: |
        sleep 30
        curl -f -s ${{ env.HEALTH_CHECK_URL }} || exit 1
        echo "‚úÖ Manual deployment health check passed!"

  # Cleanup job - runs weekly
  cleanup:
    name: Server Cleanup
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Run server cleanup
      run: |
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'EOF'
          cd ${{ env.PROJECT_PATH }}
          ./deploy.sh -c
          echo "‚úÖ Weekly cleanup completed!"
        EOF